-- 제품 정보 테이블
CREATE TABLE `MicroSonicErp`.`ITEMS` (
  `item_code` VARCHAR(100) NOT NULL,
  `item_pic` VARCHAR(100) NOT NULL,
  `item_name` VARCHAR(255) NOT NULL,
  `item_category` VARCHAR(100) NOT NULL,
  `item_ea_price` DECIMAL(10, 2) NOT NULL,
  `item_stock_amount`INT NOT NULL,
  `ofile` VARCHAR(255) NULL,
  `sfile` VARCHAR(255) NULL,
  PRIMARY KEY (`item_code`));
  
SELECT * FROM ITEMS;


-- 부서 정보 테이블
CREATE TABLE `MicroSonicErp`.`DEPARTMENTS` (
  `DEPT_CODE` VARCHAR(100) NOT NULL,
  `DEPT_NAME` VARCHAR(100) NOT NULL,
  `DEPT_DESCRIPTION` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`DEPT_CODE`));

SELECT * FROM DEPARTMENTS;


-- 입출고 정보 테이블
CREATE TABLE `MicroSonicErp`.`INVENTORIES` (
  `INVENTORY_CODE` VARCHAR(100) NOT NULL,
  `ITEM_CODE` VARCHAR(100) NOT NULL,
  `INVENTORY_CATEGORY` VARCHAR(100) NOT NULL,
  `INVENTORY_AMOUNT` INT NOT NULL,
  `TOTAL_PRICE` DECIMAL(10, 2) NOT NULL,
  `CLIENT_CODE` VARCHAR(255) NOT NULL,
  `TRANSACTION_DATE` DATETIME NOT NULL,
  PRIMARY KEY (`INVENTORY_CODE`));


SELECT * FROM INVENTORIES;

-- 발주서 테이블
CREATE TABLE `MicroSonicErp`.`PURCHASE_ORDERS` (
  `PO_CODE` VARCHAR(100) NOT NULL,
  `PO_DATE` DATETIME NOT NULL,
  `CLIENT_CODE` VARCHAR(100) NOT NULL,
  `ITEM_CODE` VARCHAR(100) NOT NULL,
  `AMOUNT` INT NOT NULL,
  `PROVIDED_PRICE` DECIMAL(10, 2) NOT NULL,
  `SALES_TAX` DECIMAL(10, 2) NOT NULL,
  `DELIVERY_DATE` DATETIME NOT NULL,
  `DUE_DATE` DATETIME NOT NULL,
  `OUTSTAND_IDX` INT NOT NULL,
  PRIMARY KEY (`PO_CODE`));

SELECT * FROM PURCHASE_ORDERS;


-- 견적서 테이블
CREATE TABLE `MicroSonicErp`.`QUOTATIONS` (
  `QUOTATION_CODE` VARCHAR(100) NOT NULL,
  `QUOTATION_DATE` DATETIME NOT NULL,
  `CLIENT_CODE` VARCHAR(100) NOT NULL,
  `ITEM_CODE` VARCHAR(100) NOT NULL,
  `ITEM_AMOUNT` INT NOT NULL,
  `PROVIDED_PRICE` DECIMAL(10, 2) NOT NULL,
  `SALES_TAX` DECIMAL(10, 2) NOT NULL,
  PRIMARY KEY (`QUOTATION_CODE`));

SELECT * FROM PURCHASE_ORDERS;


CREATE TABLE MICROSONICERP.ACCOUNTS(
	ACCOUNT_NUMBER VARCHAR(30) NOT NULL,
    BANK_NAME VARCHAR(100) NOT NULL,
    BALANCE INT NOT NULL,
    PRIMARY KEY(ACCOUNT_NUMBER)
);

CREATE TABLE MICROSONICERP.OUTSTANDING_AMOUNTS(
	OUTSTAND_IDX INT NOT NULL,
    OUTSTAND_DATE DATETIME NOT NULL,
    COLLECT_DATE DATETIME NOT NULL,
    OUTSTAND_AMOUNT INT NOT NULL,
    OUTSTAND_STATE VARCHAR(10) NOT NULL,
    CLIENT_CODE VARCHAR(100) NOT NULL,
    PRIMARY KEY(OUTSTAND_IDX)
);

CREATE TABLE MICROSONICERP.ACCOUNT_TRANSACTIONS(
	ACCOUNT_TRANSACTION_IDX INT NOT NULL,
    ACCOUNT_TRANSACTION_DIVISION VARCHAR(10) NOT NULL,
	ACCOUNT_TRANSACTION_CATEGORY VARCHAR(30) NOT NULL,
    ACCOUNT_TRANSACTION_AMOUNT INT NOT NULL,
    ACCOUNT_TRANSACTION_DATE DATETIME NOT NULL,
    ACCOUNT_NUMBER VARCHAR(30) NOT NULL,
    CLIENT_CODE VARCHAR(100) NOT NULL,
    PRIMARY KEY(ACCOUNT_TRANSACTION_IDX)
);

CREATE TABLE MICROSONICERP.TRANSACTIONS(
	TRANSACTION_IDX INT NOT NULL,
    TRANSACTION_DATE DATETIME NOT NULL,
    CLIENT_CODE VARCHAR(100) NOT NULL,
    PROOF_CATEGORY VARCHAR(100) NOT NULL,
    EMP_ID VARCHAR(50) NOT NULL,
    FILE_CODE_IDX INT UNIQUE NOT NULL,
    PRIMARY KEY(TRANSACTION_IDX)
);

CREATE TABLE MICROSONICERP.ACCOUNTING_RECORDS(
	ACCOUNTING_RECORD_IDX INT NOT NULL,
    TRANSACTION_IDX INT NOT NULL,
    ACCOUNTING_RECORD_CATEGORY VARCHAR(10) NOT NULL,
    ACCOUNT_SUBJECT_CODE VARCHAR(100) NOT NULL,
    ACCOUNT_SUBJECT VARCHAR(255) NOT NULL,
    ACCOUNTING_RECORD_AMOUNT INT NOT NULL,
    SUMMARY VARCHAR(4000),
    PRIMARY KEY(ACCOUNTING_RECORD_IDX)
);

CREATE TABLE MICROSONICERP.FILES(
	FILE_IDX INT NOT NULL,
    FILE_CODE_IDX INT NOT NULL,
    OFILE VARCHAR(255) NOT NULL,
    SFILE VARCHAR(255) NOT NULL,
    PRIMARY KEY(FILE_IDX)
);

CREATE TABLE MICROSONICERP.TRANSACTION_ITEMS(
	TRANSACTION_ITEM_IDX INT NOT NULL,
    TRANSACTION_IDX INT NOT NULL,
    ITEM_CODE VARCHAR(100) NOT NULL,
    AMOUNT INT NOT NULL,
    TOTAL_PRICE INT NOT NULL,
    PRIMARY KEY(TRANSACTION_ITEM_IDX)
);

CREATE TABLE MICROSONICERP.CLIENTS(
	CLIENT_CODE VARCHAR(100) NOT NULL,
    CLIENT_CODE_CATEGORY VARCHAR(20) NOT NULL,
    BUSINESS_NUMBER VARCHAR(255) NOT NULL,
    COMPANY_NAME VARCHAR(100) NOT NULL,
    CEO_NAME VARCHAR(100) NOT NULL,
    INDUSTRY VARCHAR(100) NOT NULL,
    SALES_PIC_NAME VARCHAR(100) NOT NULL,
    CLIENT_PIC_NAME VARCHAR(100) NOT NULL,
    CLIENT_CONTACT VARCHAR(20) NOT NULL,
    CLIENT_ADDRESS VARCHAR(100) NOT NULL,
    CLIENT_ACCOUNT_NUMBER VARCHAR(30) NOT NULL,
    CLIENT_EMAIL VARCHAR(255) NOT NULL,
    REGISTRATION_DATE DATETIME NOT NULL,
    PRIMARY KEY(CLIENT_CODE)
);
-- 임직원 계정 정보 테이블
CREATE TABLE `MicroSonicErp`.`EMPLOYEES` (
  `EMP_ID` VARCHAR(50) NOT NULL,
  `EMP_PW` VARCHAR(100) NOT NULL,
  `EMP_NAME` VARCHAR(50) NOT NULL,
  `EMP_PHONE` VARCHAR(50) NOT NULL,
  `DEPT_CODE` VARCHAR(100) NOT NULL,
  `EMP_EMAIL` VARCHAR(100) NOT NULL,
  `EMP_ROLE` VARCHAR(50) NOT NULL,
  `EMP_POSITION` VARCHAR(50) NULL,
  `EMP_JOINDATE` DATE NULL,
  PRIMARY KEY (`EMP_ID`));



-- 급여 테이블
CREATE TABLE `MicroSonicErp`.`SALARIES` (
  `SALARY_CODE` VARCHAR(50) NOT NULL,
  `EMP_ID` VARCHAR(50) NOT NULL,
  `SALARY_PAYMENT_DATE` DATE NOT NULL,
  `SALARY_TOTAL_AMOUNT` DECIMAL(10, 2) NOT NULL,
  `SALARY_NET_PAY` DECIMAL(10, 2) NOT NULL,
  PRIMARY KEY (`SALARY_CODE`));

-- 공제 테이블
  CREATE TABLE `MicroSonicErp`.`DEDUCTIONS` (
  `SALARY_CODE` VARCHAR(50) NOT NULL,
  `DEDUCTIONS_ITEMS` VARCHAR(50) NULL,
  `DEDUCTIONS_AMOUNT` DECIMAL(10, 2) NULL
  );

-- 수당 테이블
CREATE TABLE `MicroSonicErp`.`ALLOWANCES` (
  `SALARY_CODE` VARCHAR(50) NOT NULL,
  `ALLOWANCE_ITEMS` VARCHAR(50) NOT NULL,
  `AMOUNT` DECIMAL(10, 2) NOT NULL);

-- 근태 테이블
CREATE TABLE `MicroSonicErp`.`ATTENDANCES` (
  `ATTENDANCE_CODE` VARCHAR(50) NOT NULL,
  `ATTENDANCE_LIST` VARCHAR(50) NOT NULL,
  `ETC` VARCHAR(200) NULL,
  `EMP_ID` VARCHAR(50) NOT NULL,
  `ATTENDANCE_DATE` DATE NOT NULL
  );


-- select * from information_schema.table_constraints where constraint_schema = 'MICROSONICERP';
  ALTER TABLE OUTSTANDING_AMOUNTS ADD FOREIGN KEY(CLIENT_CODE) REFERENCES CLIENTS(CLIENT_CODE);
  ALTER TABLE ACCOUNT_TRANSACTIONS ADD FOREIGN KEY(CLIENT_CODE) REFERENCES CLIENTS(CLIENT_CODE);
  ALTER TABLE ACCOUNT_TRANSACTIONS ADD FOREIGN KEY(ACCOUNT_NUMBER) REFERENCES ACCOUNTS(ACCOUNT_NUMBER);
  ALTER TABLE TRANSACTIONS ADD FOREIGN KEY(CLIENT_CODE) REFERENCES CLIENTS(CLIENT_CODE);
  ALTER TABLE ACCOUNTING_RECORDS ADD FOREIGN KEY(TRANSACTION_IDX) REFERENCES TRANSACTIONS(TRANSACTION_IDX);
  ALTER TABLE FILES ADD FOREIGN KEY(FILE_CODE_IDX) REFERENCES TRANSACTIONS(FILE_CODE_IDX);
  ALTER TABLE TRANSACTION_ITEMS ADD FOREIGN KEY(TRANSACTION_IDX) REFERENCES TRANSACTIONS(TRANSACTION_IDX);
  ALTER TABLE TRANSACTION_ITEMS ADD FOREIGN KEY(ITEM_CODE) REFERENCES ITEMS(ITEM_CODE);

-- Add FK
  ALTER TABLE INVENTORIES ADD FOREIGN KEY(ITEM_CODE) REFERENCES ITEMS(ITEM_CODE);
  ALTER TABLE INVENTORIES ADD FOREIGN KEY(CLIENT_CODE) REFERENCES CLIENTS(CLIENT_CODE);
  ALTER TABLE PURCHASE_ORDERS ADD FOREIGN KEY(ITEM_CODE) REFERENCES ITEMS(ITEM_CODE);
  ALTER TABLE PURCHASE_ORDERS ADD FOREIGN KEY(CLIENT_CODE) REFERENCES CLIENTS(CLIENT_CODE);
  ALTER TABLE QUOTATIONS ADD FOREIGN KEY(ITEM_CODE) REFERENCES ITEMS(ITEM_CODE);
  ALTER TABLE QUOTATIONS ADD FOREIGN KEY(CLIENT_CODE) REFERENCES CLIENTS(CLIENT_CODE);
  ALTER TABLE EMPLOYEES ADD FOREIGN KEY(DEPT_CODE) REFERENCES departments(DEPT_CODE);

-- Add FK
  ALTER TABLE SALARIES ADD FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID);
  ALTER TABLE DEDUCTIONS ADD FOREIGN KEY(SALARY_CODE) REFERENCES SALARIES(SALARY_CODE);
  ALTER TABLE ALLOWANCES ADD FOREIGN KEY(SALARY_CODE) REFERENCES SALARIES(SALARY_CODE);
  ALTER TABLE ATTENDANCES ADD FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEES(EMP_ID);